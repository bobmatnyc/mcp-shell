[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-desktop-gateway"
version = "1.1.0"
description = "A flexible gateway for Model Context Protocol (MCP) servers"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Robert (Masa) Matsuoka", email = "bobmatnyc@users.noreply.github.com"},
]
keywords = ["mcp", "model-context-protocol", "claude", "ai", "gateway", "automation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Shells",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
]

dependencies = [
    "mcp>=1.9.3",
    "pydantic>=2.11.5",
    "PyYAML>=6.0.2",
    "typing-extensions>=4.8.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "openai>=1.0",
    "tiktoken>=0.5.0",
    "faiss-cpu>=1.7.4",
    "click>=8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.90.0",
    "ruff>=0.1.0",
    "pyright>=1.1.340",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.90.0",
]

security = [
    "pip-audit>=2.6.0",
    "bandit[toml]>=1.7.5",
    "safety>=3.0.0",
]

rest-api = [
    "fastapi>=0.112.2",
    "uvicorn[standard]>=0.32.1",
    "motor>=3.7.0",
    "sse-starlette>=2.1.3",
    "httpx>=0.27.2",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

all = [
    "mcp-desktop-gateway[dev,test,security,rest-api,docs]",
]

[project.urls]
Homepage = "https://github.com/bobmatnyc/mcp-desktop-gateway"
Documentation = "https://github.com/bobmatnyc/mcp-desktop-gateway/blob/main/docs/PROJECT.md"
Repository = "https://github.com/bobmatnyc/mcp-desktop-gateway.git"
Issues = "https://github.com/bobmatnyc/mcp-desktop-gateway/issues"

[project.scripts]
# These will be wrapper scripts created during installation

[tool.setuptools]
packages = ["core", "connectors", "rest_api", "unified_backend"]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.example.yaml", "py.typed"]

# Ruff configuration - replaces Black, isort, Flake8, and more
[tool.ruff]
target-version = "py311"
line-length = 100
src = ["src", "tests"]
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "node_modules",
]

select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",  # line too long (handled by formatter)
    "PLR0913",  # too many arguments
    "PLR2004",  # magic value comparison
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["core", "connectors", "rest_api", "unified_backend"]

[tool.ruff.per-file-ignores]
"tests/*" = ["ARG001"]  # Unused function arguments in tests
"__init__.py" = ["F401"]  # Unused imports in __init__ files

# Pyright configuration
[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "standard"
reportMissingImports = false
reportMissingTypeStubs = false
reportOptionalMemberAccess = false
reportGeneralTypeIssues = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportUnnecessaryTypeIgnoreComment = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportWildcardImportFromLibrary = true
reportInvalidTypeVarUse = true

include = ["src", "tests"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/.*",
    "build",
    "dist",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Bandit security configuration
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # assert_used - we use asserts in the code

# Commitizen configuration for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "VERSION",
    "src/__init__.py:__version__",
]